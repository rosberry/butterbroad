def rsb_changelog_release_notes(tickets)
  description = ''

  features = []
  fixes = []

  tickets.to_a.each do |ticket|
    if ticket.issuetype.name == 'Bug'
      fixes.push(ticket)
    else
      features.push(ticket)
    end
  end

  unless features.empty?
    description += "\n#### Features:"
    features.each do |ticket|
      description += "\n\n â€¢ [#{ticket.key}](#{ENV['JIRA_WEBSITE']}/browse/#{ticket.key}) #{ticket.summary};"
    end    
  end
  
  unless fixes.empty?
    description += "\n" unless description.empty?
    description += "\n#### Fixes:"
    fixes.each do |ticket|
      description += "\n\n â€¢ [#{ticket.key}](#{ENV['JIRA_WEBSITE']}/browse/#{ticket.key}) #{ticket.summary};"
    end
  end

  description
end

def rsb_update_changelog(options)
  release_notes = options[:release_notes]  
  if release_notes.lines.length == 0
    return
  end

  changelog_exists = File.file?('../CHANGELOG.md')
  begin
    file = File.open('../CHANGELOG.md', 'a')
    if changelog_exists == false
      initialText = "# Changelog\n"
      initialText += "## Disclaimer\n"
      initialText += "This file is generated automatically, please do not edit this file manually.\n\n"
      file.write(initialText)
    end
  rescue IOError => e
    puts e.message
  ensure
    file.close unless file.nil?
  end
  version_number = get_info_plist_value(path: ENV['INFOPLIST_PATH'], key: 'CFBundleShortVersionString')
  rsb_write_release_notes_to_file(
    version_number: version_number,
    release_notes: release_notes,
    file: '../CHANGELOG.md'
  )

  if options[:commit_changes] 
    git_add(path: 'CHANGELOG.md')
    sh("git commit -a -m 'Update changelog'")
  end 
end

def rsb_write_release_notes_to_file(options)
  version_number = options[:version_number]
  release_notes = options[:release_notes]
  release_notes.gsub!(/\r\n?/, "\n")

  file = options[:file]

  fixed_release_notes = Time.new.strftime("## Build #{version_number}-#{build_number} (%d.%m.%Y)\n")
  fixed_release_notes.concat("#{release_notes}\n\n")
  write_to(file, 4, fixed_release_notes)
end

def write_to(filename, line, sdat)
  open(filename, 'r+') do |f|
    while (line -= 1) > 0
      f.readline
    end
    pos = f.pos
    rest = f.read
    f.seek pos
    f.write sdat
    f.write rest
  end
end
